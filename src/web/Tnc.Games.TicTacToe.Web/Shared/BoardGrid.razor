@using Microsoft.AspNetCore.Components

<div class="board" style="display:grid; grid-template-columns:repeat(3, 100px); gap:8px;">
    @for (int i = 0; i < 9; i++)
    {
        var idx = i; // capture local copy to avoid closure issues
        var display = Board is not null && Board.Length > idx ? Board[idx] : "E";
        var isLegal = LegalMoves != null && LegalMoves.Contains(idx);
        var isWinner = WinningLine != null && WinningLine.Contains(idx);
        var bg = Disabled ? "#f5f5f5" : isWinner ? "#ffeb3b" : isLegal ? "#dff0d8" : "white";
        var fontWeight = isWinner ? "700" : "400";
        <button class="cell btn" style="width:100px;height:100px;font-size:32px;background:@bg;position:relative;font-weight:@fontWeight;border:@(isWinner ? "3px solid #f57f17" : "1px solid #ccc");" @onclick="() => OnCellClick.InvokeAsync(idx+1)" disabled="@(Disabled || display != "E")">
            <span style="position:absolute;top:4px;left:6px;font-size:12px;color:#666;">@((idx+1))</span>
            <span>@display</span>
        </button>
    }
</div>

@code {
    [Parameter]
    public string[]? Board { get; set; }

    [Parameter]
    public EventCallback<int> OnCellClick { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public int[]? LegalMoves { get; set; }

    [Parameter]
    public int[]? WinningLine { get; set; }
}
