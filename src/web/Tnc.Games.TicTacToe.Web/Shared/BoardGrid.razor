@using Microsoft.AspNetCore.Components

<div class="board" style="display:grid;grid-template-columns:repeat(3, var(--cell-size, 100px));gap:var(--space-2,8px);justify-content:center;">
    @for (int i = 0; i < 9; i++)
    {
        var idx = i;
        var display = Board is not null && Board.Length > idx ? Board[idx] : "E";
        var isLegal = LegalMoves != null && LegalMoves.Contains(idx);
        var isWinner = WinningLine != null && WinningLine.Contains(idx);
        bool isEmpty = display == "E";
        bool blocked = Disabled || !isEmpty;
        var extra = isWinner ? "winner" : (isEmpty ? "empty" : "filled");
        <div role="button"
             tabindex="@(blocked ? -1 : 0)"
             class="cell @extra @(isLegal && isEmpty ? "legal" : string.Empty)"
             aria-disabled="@(blocked.ToString().ToLower())"
             @onclick="() => { if(!blocked) OnCellClick.InvokeAsync(idx+1); }"
             @onkeydown="(e) => OnKey(e, blocked, idx)"
             aria-label="@(isEmpty ? $"Cell {idx+1}: empty" : $"Cell {idx+1}: {display}")">
            <span class="index">@((idx+1))</span>
            <span class="symbol mark">@(!isEmpty ? display : string.Empty)</span>
        </div>
    }
</div>

@code {
    [Parameter] public string[]? Board { get; set; }
    [Parameter] public EventCallback<int> OnCellClick { get; set; }
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public int[]? LegalMoves { get; set; }
    [Parameter] public int[]? WinningLine { get; set; }

    private void OnKey(KeyboardEventArgs e, bool blocked, int idx)
    {
        if (blocked) return;
        if (e.Key == "Enter" || e.Key == " " || e.Code == "Space")
        {
            OnCellClick.InvokeAsync(idx+1);
        }
    }
}
