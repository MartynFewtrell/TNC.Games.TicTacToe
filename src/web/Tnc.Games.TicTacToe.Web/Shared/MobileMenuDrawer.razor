@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web

@if (Open)
{
    <div class="drawer-overlay" @onclick="HandleOverlayClick"></div>
    <aside id="mobileNavDrawer" class="drawer" role="dialog" aria-modal="true" aria-label="Navigation menu" @onkeydown="TrapFocus">
        <div class="drawer-header">
            <span class="title">Menu</span>
            <button class="close-btn" @onclick="Close" aria-label="Close menu">×</button>
        </div>
        <nav class="drawer-links">
            <NavLink class="drawer-link" href="/" Match="NavLinkMatch.All" @onclick="Close">Play</NavLink>
            <NavLink class="drawer-link" href="/how-to-play" @onclick="Close">How to Play</NavLink>
            <NavLink class="drawer-link" href="/training" @onclick="Close">Training</NavLink>
            <NavLink class="drawer-link" href="/admin" @onclick="Close">Admin</NavLink>
        </nav>
        <div class="drawer-actions">
            <button class="theme-toggle-btn" @onclick="ToggleTheme" aria-label="Toggle color theme">@ThemeLabel</button>
        </div>
    </aside>
}

@code {
    [Parameter] public bool Open { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback ToggleTheme { get; set; } = default!;
    [Parameter] public string ThemeLabel { get; set; } = "Dark";

    [Inject] private IJSRuntime JS { get; set; } = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Open)
        {
            await JS.InvokeVoidAsync("blazorFocus", "mobileNavDrawer");
        }
    }

    private async Task Close()
    {
        if (OnClose.HasDelegate)
            await OnClose.InvokeAsync();
    }

    private async Task HandleOverlayClick() => await Close();

    private async Task TrapFocus(KeyboardEventArgs e)
    {
        if (!Open) return;
        if (e.Key == "Escape") { await Close(); return; }
        if (e.Key != "Tab") return;

        var focusables = await JS.InvokeAsync<string[]>("getFocusableIds", "mobileNavDrawer");
        if (focusables.Length == 0) return;
        var activeId = await JS.InvokeAsync<string?>("getActiveElementId");
        int idx = System.Array.IndexOf(focusables, activeId);

        if (e.ShiftKey)
        {
            if (idx <= 0)
            {
                await JS.InvokeVoidAsync("focusElementById", focusables[^1]);
            }
        }
        else
        {
            if (idx == focusables.Length - 1)
            {
                await JS.InvokeVoidAsync("focusElementById", focusables[0]);
            }
        }
    }
}
